package com.autoreason.setmincheck.setobjects;

import java.util.Set;

/**
 * A {@link SetConverter} implementation for {@link BitVectorSet}
 *
 */
public class BitVectorSetConverter extends AbstractSetConverter<long[], Integer> {

	/**
	 * Create a {@code BitVectorSetConverter} instance where the length for the
	 * {@code long[]} set representation generated by {@link #convertSet(Set)} is
	 * determined by the converted set's size
	 * 
	 * @param len An {@code int} greater than 1
	 */
	BitVectorSetConverter() {
		// length of set representation is determined by set size
		this.convertAttribute = -1;
	}

	/**
	 * Create a {@code BitVectorSetConverter} instance with predefined length for
	 * the {@code long[]} set representation generated by {@link #convertSet(Set)}
	 * 
	 * @param len An {@code int} greater than 1
	 */
	BitVectorSetConverter(int len) {
		this.convertAttribute = len;
	}

	@Override
	public long[] convertSet(Set<?> set) {
		int len = convertAttribute;
		// check if certain length of representation given
		if (len < 1) {
			// determine length of array based on set size
			len = defineLength(set.size());
		}
		long[] convertedSet = new long[len];

		// use elements of set to define position of 1-bits
		for (Object e : set) {
			// determine position in complete bit vector consisting of 64-bit long values
			int pos = e.hashCode() % (len * 64);
			// only allow positive values
			if (pos < 0) {
				pos *= -1;
			}
			// set bit in appropriate long value of the array
			convertedSet[pos / 64] |= (long) 1 << pos;
		}

		return convertedSet;
	}

	/**
	 * Define length for an array as the smallest multiple of the static value
	 * {@link #DIVISOR} that comprises the given {@code size} value
	 * 
	 * @param size A positive {@code int} value related to the size of some set
	 * @return An {@code int} for the smallest multiple of the static value
	 *         {@link #DIVISOR} that comprises the given {@code size} value
	 */
	public static int defineLength(int size) {
		return size / DIVISOR + ((size % DIVISOR == 0) ? 0 : 1);
	}

}
