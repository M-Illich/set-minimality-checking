package com.autoreason.setmincheck.setobjects;

import java.util.Set;

/**
 * A {@link SetConverter} implementation for {@link BitVectorSet}
 *
 */
public class BitVectorSetConverter extends AbstractSetConverter<long[], Integer> {

	/**
	 * integer by which the set size is divided to determine the length of the array
	 */
	final static int DIVISOR = 64;

	/**
	 * Create a {@code BitVectorSetConverter} instance where the length for the
	 * {@code long[]} set representation generated by {@link #convertSet(Set)} is
	 * determined by the converted set's size
	 * 
	 * @param len An {@code int} greater than 1
	 */
	BitVectorSetConverter() {
		// length of set representation is determined by set size
		this.convertAttribute = -1;
	}

	/**
	 * Create a {@code BitVectorSetConverter} instance with predefined length for
	 * the {@code long[]} set representation generated by {@link #convertSet(Set)}
	 * 
	 * @param len An {@code int} greater than 1
	 */
	BitVectorSetConverter(int len) {
		this.convertAttribute = len;
	}

	@Override
	public long[] convertSet(Set<?> set) {
		int len = convertAttribute;
		// check if certain length of representation given
		if (len < 1) {
			// determine length of array based on set size
			len = set.size() / DIVISOR + 1; // TODO set.size() / 64 + 1
		}
		long[] convertedSet = new long[len];

		// use elements of set to define position of 1-bits
		for (Object e : set) {
			// determine position
			int pos = e.hashCode() % (len * DIVISOR);
			// only allow positive values
			if (pos < 0) {
				pos *= -1;
			}
			// set bit in appropriate long value
			convertedSet[pos / DIVISOR] |= (long) 1 << pos;
		}

		return convertedSet;
	}

}
